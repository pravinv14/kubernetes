##############################################################################################################
     System preparation for kubernetes cluster configuration using kubeadm using Centos/RHEL/FEDORA
#############################################################################################################
# update the system for latest binaries
yum update
yum upgrade

# install docker 
yum install docker

# enable the docker service permanently 
systemctl enable /usr/lib/systemd/system/docker.service

# install docker-compose
curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose

# check version of docker-compose
docker-compose --version

# check the below commands in all the host to ensure the output/values are unique
ifconfig -a
cat /sys/class/dmi/id/product_uuid

# start docker service
systemctl start docker
systemctl enable docker
systemctl daemon-reload

# set selinux to permissive
setenforce 0
# verify selinux if it is set to permissive mode
getenforce

# set selinux permantely for permissive (persistent across reboot)
sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

# adding kubernetes repository to install kubernetes
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

# install kubelet (kubernetes agent), kubectl (k8s controler), kubeadm (to create cluster)
yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

# service restart for kubelet
systemctl daemon-reload
systemctl restart kubelet

# verify kubectl version using  below command
kubectl version -o json

# to enable kubelet service permantly (persistent across reboot)
systemctl enable /usr/lib/systemd/system/kubelet.service

# disable firewall 
systemctl disable firewalld && systemctl stop firewalld



# bridge network in iptables
sysctl -w net.bridge.bridge-nf-call-iptables=1
echo "net.bridge.bridge-nf-call-iptables=1" > /etc/sysctl.d/k8s.conf

# To turn off swap
swapoff -a &&  sed -i '/ swap / s/^/#/' /etc/fstab

# Configuring name resolution for all three hosts
# Entries to add to /etc/hosts on each cluster node

192.168.1.5 master (node)
192.168.1.9 worker (node)

#### for cgroup ####
# This section will be edited again for clear understanding later
kubeadm reset
cat << EOF > /etc/docker/daemon.json
{
    "exec-opts": ["native.cgroupdriver=systemd"]
}
EOF
systemctl stop docker
systemctl status docker
systemctl start docker
docker info | grep -i cgroup


INITILIZING the master node with kubeadm init command as below
kubeadm init --apiserver-advertise-address=192.168.1.9 --pod-network-cidr=192.168.0.0/16
# the above command gives kubeadm join command to join worker nodes (use it in remote hosts)

#use below command to add network and make the master node in ready status
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml #(had success using this)
#one another network
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

#verify the master node
kubectl describe nodes <master node name here>


# export admin kubeconfig to use the kube cluster which is initilized 
export KUBECONFIG=/etc/kubernetes/admin.conf


# If cluster token expired check below
kubeadm tokens list
kubeadm token create --print-join-command

# verify the token
kubeadm tokens list

# example join string given below
kubeadm join 192.168.1.130:6443 --token <token_here> --discovery-token-ca-cert-hash <cert-hash-here>

# check kubernetes cluster nodes using below command
kubectl get nodes

user@host:/etc/docker# kubectl get nodes
NAME     STATUS   ROLES                  AGE   VERSION
worker(node)   Ready    <none>                 24m   v1.20.2
master(node)   Ready    control-plane,master   30m   v1.20.2
user@host:/etc/docker# kubectl get nodes worker
NAME     STATUS   ROLES    AGE   VERSION
worker   Ready    <none>   27m   v1.20.2
user@host:/etc/docker# 


